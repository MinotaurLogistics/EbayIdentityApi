<?php
/**
 * BusinessAccount
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\EbayIdentityClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Identity API
 *
 * Retrieves the authenticated user's account profile information. It can be used to let users log into your app or site using eBay, which frees you from needing to store and protect user's PII (Personal Identifiable Information) data.
 *
 * OpenAPI spec version: v1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\EbayIdentityClient\Model;

use \ArrayAccess;
use \Swagger\EbayIdentityClient\ObjectSerializer;

/**
 * BusinessAccount Class Doc Comment
 *
 * @category Class
 * @description The type that defines the fields for the business account information.
 * @package  Swagger\EbayIdentityClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BusinessAccount implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BusinessAccount';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'address' => '\Swagger\EbayIdentityClient\Model\Address',
        'doing_business_as' => 'string',
        'email' => 'string',
        'name' => 'string',
        'primary_contact' => '\Swagger\EbayIdentityClient\Model\Contact',
        'primary_phone' => '\Swagger\EbayIdentityClient\Model\Phone',
        'secondary_phone' => '\Swagger\EbayIdentityClient\Model\Phone',
        'website' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'address' => null,
        'doing_business_as' => null,
        'email' => null,
        'name' => null,
        'primary_contact' => null,
        'primary_phone' => null,
        'secondary_phone' => null,
        'website' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address' => 'address',
        'doing_business_as' => 'doingBusinessAs',
        'email' => 'email',
        'name' => 'name',
        'primary_contact' => 'primaryContact',
        'primary_phone' => 'primaryPhone',
        'secondary_phone' => 'secondaryPhone',
        'website' => 'website'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address' => 'setAddress',
        'doing_business_as' => 'setDoingBusinessAs',
        'email' => 'setEmail',
        'name' => 'setName',
        'primary_contact' => 'setPrimaryContact',
        'primary_phone' => 'setPrimaryPhone',
        'secondary_phone' => 'setSecondaryPhone',
        'website' => 'setWebsite'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address' => 'getAddress',
        'doing_business_as' => 'getDoingBusinessAs',
        'email' => 'getEmail',
        'name' => 'getName',
        'primary_contact' => 'getPrimaryContact',
        'primary_phone' => 'getPrimaryPhone',
        'secondary_phone' => 'getSecondaryPhone',
        'website' => 'getWebsite'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['doing_business_as'] = isset($data['doing_business_as']) ? $data['doing_business_as'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['primary_contact'] = isset($data['primary_contact']) ? $data['primary_contact'] : null;
        $this->container['primary_phone'] = isset($data['primary_phone']) ? $data['primary_phone'] : null;
        $this->container['secondary_phone'] = isset($data['secondary_phone']) ? $data['secondary_phone'] : null;
        $this->container['website'] = isset($data['website']) ? $data['website'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address
     *
     * @return \Swagger\EbayIdentityClient\Model\Address
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Swagger\EbayIdentityClient\Model\Address $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets doing_business_as
     *
     * @return string
     */
    public function getDoingBusinessAs()
    {
        return $this->container['doing_business_as'];
    }

    /**
     * Sets doing_business_as
     *
     * @param string $doing_business_as An additional name that is used for their business on eBay. The business name is returned in the name field.
     *
     * @return $this
     */
    public function setDoingBusinessAs($doing_business_as)
    {
        $this->container['doing_business_as'] = $doing_business_as;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email The email address of the business account.
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The business name associated with the user's eBay account.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets primary_contact
     *
     * @return \Swagger\EbayIdentityClient\Model\Contact
     */
    public function getPrimaryContact()
    {
        return $this->container['primary_contact'];
    }

    /**
     * Sets primary_contact
     *
     * @param \Swagger\EbayIdentityClient\Model\Contact $primary_contact primary_contact
     *
     * @return $this
     */
    public function setPrimaryContact($primary_contact)
    {
        $this->container['primary_contact'] = $primary_contact;

        return $this;
    }

    /**
     * Gets primary_phone
     *
     * @return \Swagger\EbayIdentityClient\Model\Phone
     */
    public function getPrimaryPhone()
    {
        return $this->container['primary_phone'];
    }

    /**
     * Sets primary_phone
     *
     * @param \Swagger\EbayIdentityClient\Model\Phone $primary_phone primary_phone
     *
     * @return $this
     */
    public function setPrimaryPhone($primary_phone)
    {
        $this->container['primary_phone'] = $primary_phone;

        return $this;
    }

    /**
     * Gets secondary_phone
     *
     * @return \Swagger\EbayIdentityClient\Model\Phone
     */
    public function getSecondaryPhone()
    {
        return $this->container['secondary_phone'];
    }

    /**
     * Sets secondary_phone
     *
     * @param \Swagger\EbayIdentityClient\Model\Phone $secondary_phone secondary_phone
     *
     * @return $this
     */
    public function setSecondaryPhone($secondary_phone)
    {
        $this->container['secondary_phone'] = $secondary_phone;

        return $this;
    }

    /**
     * Gets website
     *
     * @return string
     */
    public function getWebsite()
    {
        return $this->container['website'];
    }

    /**
     * Sets website
     *
     * @param string $website The business website address associated with the eBay account.
     *
     * @return $this
     */
    public function setWebsite($website)
    {
        $this->container['website'] = $website;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


