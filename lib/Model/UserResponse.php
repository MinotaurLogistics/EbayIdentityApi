<?php
/**
 * UserResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\EbayIdentityClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Identity API
 *
 * Retrieves the authenticated user's account profile information. It can be used to let users log into your app or site using eBay, which frees you from needing to store and protect user's PII (Personal Identifiable Information) data.
 *
 * OpenAPI spec version: v1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.19
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\EbayIdentityClient\Model;

use \ArrayAccess;
use \Swagger\EbayIdentityClient\ObjectSerializer;

/**
 * UserResponse Class Doc Comment
 *
 * @category Class
 * @description The type that defines the fields for the &lt;b&gt;getUser&lt;/b&gt; method.
 * @package  Swagger\EbayIdentityClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UserResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UserResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_type' => 'string',
        'business_account' => '\Swagger\EbayIdentityClient\Model\BusinessAccount',
        'individual_account' => '\Swagger\EbayIdentityClient\Model\IndividualAccount',
        'registration_marketplace_id' => 'string',
        'status' => 'string',
        'user_id' => 'string',
        'username' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_type' => null,
        'business_account' => null,
        'individual_account' => null,
        'registration_marketplace_id' => null,
        'status' => null,
        'user_id' => null,
        'username' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_type' => 'accountType',
        'business_account' => 'businessAccount',
        'individual_account' => 'individualAccount',
        'registration_marketplace_id' => 'registrationMarketplaceId',
        'status' => 'status',
        'user_id' => 'userId',
        'username' => 'username'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_type' => 'setAccountType',
        'business_account' => 'setBusinessAccount',
        'individual_account' => 'setIndividualAccount',
        'registration_marketplace_id' => 'setRegistrationMarketplaceId',
        'status' => 'setStatus',
        'user_id' => 'setUserId',
        'username' => 'setUsername'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_type' => 'getAccountType',
        'business_account' => 'getBusinessAccount',
        'individual_account' => 'getIndividualAccount',
        'registration_marketplace_id' => 'getRegistrationMarketplaceId',
        'status' => 'getStatus',
        'user_id' => 'getUserId',
        'username' => 'getUsername'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_type'] = isset($data['account_type']) ? $data['account_type'] : null;
        $this->container['business_account'] = isset($data['business_account']) ? $data['business_account'] : null;
        $this->container['individual_account'] = isset($data['individual_account']) ? $data['individual_account'] : null;
        $this->container['registration_marketplace_id'] = isset($data['registration_marketplace_id']) ? $data['registration_marketplace_id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['username'] = isset($data['username']) ? $data['username'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_type
     *
     * @return string
     */
    public function getAccountType()
    {
        return $this->container['account_type'];
    }

    /**
     * Sets account_type
     *
     * @param string $account_type Indicates the user account type. This is determined when the user registers with eBay. If they register for a business account, this value will be BUSINESS. If they register for a private account, this value will be INDIVIDUAL. This designation is required by the tax laws in the following countries: EBAY_AT, EBAY_BE, EBAY_CH, EBAY_DE, EBAY_ES, EBAY_FR, EBAY_GB, EBAY_IE, EBAY_IT, EBAY_PL Valid Values: BUSINESS or INDIVIDUAL Code so that your app gracefully handles any future changes to this list. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/commerce/identity/types/api:AccountTypeEnum'>eBay API documentation</a>
     *
     * @return $this
     */
    public function setAccountType($account_type)
    {
        $this->container['account_type'] = $account_type;

        return $this;
    }

    /**
     * Gets business_account
     *
     * @return \Swagger\EbayIdentityClient\Model\BusinessAccount
     */
    public function getBusinessAccount()
    {
        return $this->container['business_account'];
    }

    /**
     * Sets business_account
     *
     * @param \Swagger\EbayIdentityClient\Model\BusinessAccount $business_account business_account
     *
     * @return $this
     */
    public function setBusinessAccount($business_account)
    {
        $this->container['business_account'] = $business_account;

        return $this;
    }

    /**
     * Gets individual_account
     *
     * @return \Swagger\EbayIdentityClient\Model\IndividualAccount
     */
    public function getIndividualAccount()
    {
        return $this->container['individual_account'];
    }

    /**
     * Sets individual_account
     *
     * @param \Swagger\EbayIdentityClient\Model\IndividualAccount $individual_account individual_account
     *
     * @return $this
     */
    public function setIndividualAccount($individual_account)
    {
        $this->container['individual_account'] = $individual_account;

        return $this;
    }

    /**
     * Gets registration_marketplace_id
     *
     * @return string
     */
    public function getRegistrationMarketplaceId()
    {
        return $this->container['registration_marketplace_id'];
    }

    /**
     * Sets registration_marketplace_id
     *
     * @param string $registration_marketplace_id The eBay site on which the account is registered. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/commerce/identity/types/bas:MarketplaceIdEnum'>eBay API documentation</a>
     *
     * @return $this
     */
    public function setRegistrationMarketplaceId($registration_marketplace_id)
    {
        $this->container['registration_marketplace_id'] = $registration_marketplace_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Indicates the user's account status. Possible values: CONFIRMED, UNCONFIRMED, ACCOUNTONHOLD and UNDETERMINED. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/commerce/identity/types/api:UserStatusEnum'>eBay API documentation</a>
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string $user_id The eBay immutable user ID of the user's account and can always be used to identify the user.
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string $username The user name, which was specific by the user when they created the account. Note: This value can be changed by the user.
     *
     * @return $this
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


